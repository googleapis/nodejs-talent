// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protosTypes from '../protos/protos';
import * as assert from 'assert';
import { describe, it } from 'mocha';
/* eslint-disable @typescript-eslint/no-var-requires */
const tenantserviceModule = require('../src');


const FAKE_STATUS_CODE = 1;
class FakeError{
    name: string;
    message: string;
    code: number;
    constructor(n: number){
        this.name = 'fakeName';
        this.message = 'fake message';
        this.code = n;
    }
}
const error = new FakeError(FAKE_STATUS_CODE);
export interface Callback {
  (err: FakeError|null, response?: {} | null): void;
}

export class Operation{
    constructor(){};
    promise() {};
}
function mockSimpleGrpcMethod(expectedRequest: {}, response: {} | null, error: FakeError | null) {
    return (actualRequest: {}, options: {}, callback: Callback) => {
        assert.deepStrictEqual(actualRequest, expectedRequest);
        if (error) {
            callback(error);
        } else if (response) {
            callback(null, response);
        } else {
            callback(null);
        }
    };
}
describe('v4beta1.TenantServiceClient', () => {
    it('has servicePath', () => {
        const servicePath = tenantserviceModule.v4beta1.TenantServiceClient.servicePath;
        assert(servicePath);
    });
    it('has apiEndpoint', () => {
        const apiEndpoint = tenantserviceModule.v4beta1.TenantServiceClient.apiEndpoint;
        assert(apiEndpoint);
    });
    it('has port', () => {
        const port = tenantserviceModule.v4beta1.TenantServiceClient.port;
        assert(port);
        assert(typeof port === 'number');
    });
    it('should create a client with no option', () => {
        const client = new tenantserviceModule.v4beta1.TenantServiceClient();
        assert(client);
    });
    it('should create a client with gRPC fallback', () => {
        const client = new tenantserviceModule.v4beta1.TenantServiceClient({
            fallback: true,
        });
        assert(client);
    });
    it('has initialize method and supports deferred initialization', async () => {
        const client = new tenantserviceModule.v4beta1.TenantServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        assert.strictEqual(client.tenantServiceStub, undefined);
        await client.initialize();
        assert(client.tenantServiceStub);
    });
    it('has close method', () => {
        const client = new tenantserviceModule.v4beta1.TenantServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.close();
    });
    describe('createTenant', () => {
        it('invokes createTenant without error', done => {
            const client = new tenantserviceModule.v4beta1.TenantServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.cloud.talent.v4beta1.ICreateTenantRequest = {};
            request.parent = '';
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.createTenant = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.createTenant(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes createTenant with error', done => {
            const client = new tenantserviceModule.v4beta1.TenantServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.cloud.talent.v4beta1.ICreateTenantRequest = {};
            request.parent = '';
            // Mock gRPC layer
            client._innerApiCalls.createTenant = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.createTenant(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('getTenant', () => {
        it('invokes getTenant without error', done => {
            const client = new tenantserviceModule.v4beta1.TenantServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.cloud.talent.v4beta1.IGetTenantRequest = {};
            request.name = '';
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.getTenant = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.getTenant(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes getTenant with error', done => {
            const client = new tenantserviceModule.v4beta1.TenantServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.cloud.talent.v4beta1.IGetTenantRequest = {};
            request.name = '';
            // Mock gRPC layer
            client._innerApiCalls.getTenant = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.getTenant(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('updateTenant', () => {
        it('invokes updateTenant without error', done => {
            const client = new tenantserviceModule.v4beta1.TenantServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.cloud.talent.v4beta1.IUpdateTenantRequest = {};
            request.tenant = {};
            request.tenant.name = '';
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.updateTenant = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.updateTenant(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes updateTenant with error', done => {
            const client = new tenantserviceModule.v4beta1.TenantServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.cloud.talent.v4beta1.IUpdateTenantRequest = {};
            request.tenant = {};
            request.tenant.name = '';
            // Mock gRPC layer
            client._innerApiCalls.updateTenant = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.updateTenant(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('deleteTenant', () => {
        it('invokes deleteTenant without error', done => {
            const client = new tenantserviceModule.v4beta1.TenantServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.cloud.talent.v4beta1.IDeleteTenantRequest = {};
            request.name = '';
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.deleteTenant = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.deleteTenant(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes deleteTenant with error', done => {
            const client = new tenantserviceModule.v4beta1.TenantServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.cloud.talent.v4beta1.IDeleteTenantRequest = {};
            request.name = '';
            // Mock gRPC layer
            client._innerApiCalls.deleteTenant = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.deleteTenant(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('listTenants', () => {
        it('invokes listTenants without error', done => {
            const client = new tenantserviceModule.v4beta1.TenantServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.cloud.talent.v4beta1.IListTenantsRequest = {};
            request.parent = '';
            // Mock response
            const expectedResponse = {};
            // Mock Grpc layer
            client._innerApiCalls.listTenants = (actualRequest: {}, options: {}, callback: Callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            client.listTenants(request, (err: FakeError, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
        });
    });
    describe('listTenantsStream', () => {
        it('invokes listTenantsStream without error', done => {
            const client = new tenantserviceModule.v4beta1.TenantServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.cloud.talent.v4beta1.IListTenantsRequest = {};
            request.parent = '';
            // Mock response
            const expectedResponse = {response: 'data'};
            // Mock Grpc layer
            client._innerApiCalls.listTenants = (actualRequest: {}, options: {}, callback: Callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            const stream = client.listTenantsStream(request, {}).on('data', (response: {}) =>{
                assert.deepStrictEqual(response, expectedResponse);
                done();
            }).on('error', (err: FakeError) => {
                done(err);
            });
            stream.write(expectedResponse);
        });
    });
});
